package org.tw.agent_backend_demo.service.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.tw.agent_backend_demo.domain.model.Agent;
import org.tw.agent_backend_demo.domain.model.AgentPO;
import org.tw.agent_backend_demo.dto.CreateAgentRequest;
import org.tw.agent_backend_demo.dto.CreateAgentResponse;
import org.tw.agent_backend_demo.exception.AgentNameExistsException;
import org.tw.agent_backend_demo.exception.InvalidUrlFormatException;
import org.tw.agent_backend_demo.repository.AgentRepository;
import org.tw.agent_backend_demo.service.AgentService;

import java.net.URI;
import java.time.LocalDateTime;

/**
 * Implementation of AgentService interface.
 * Provides concrete business logic for agent creation and management.
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class AgentServiceImpl implements AgentService {
    
    private final AgentRepository agentRepository;
    
    /**
     * Creates a new agent based on the provided request.
     * Performs validation, business logic processing, and persistence operations.
     * 
     * @param request the agent creation request
     * @return CreateAgentResponse containing the created agent information
     */
    @Override
    public CreateAgentResponse createAgent(CreateAgentRequest request) {
        log.info("Creating agent with name: {}", request.getAgentName());
        
        // Validate agent name uniqueness
        validateAgentNameUniqueness(request.getAgentName());
        
        // Validate URLs if provided
        validateUrls(request);
        
        // Validate visibility scope
        if (request.getVisibilityScope() != null) {
            request.getVisibilityScope().validateScope();
        }
        
        // Convert request to domain model
        Agent agent = request.toAgent();
        
        // Set system fields (ID will be generated by database)
        agent.setCreator("system"); // TODO: Replace with actual user context
        agent.setCreatedAt(LocalDateTime.now());
        
        // Convert to persistence entity
        AgentPO agentPO = agent.toAgentPO();
        
        try {
            // Save to database
            AgentPO savedAgentPO = agentRepository.save(agentPO);
            log.info("Successfully created agent with ID: {}", savedAgentPO.getId());
            
            // Convert back to domain model and then to response
            Agent savedAgent = savedAgentPO.toAgent();
            return savedAgent.toCreateAgentResponse();
            
        } catch (DataIntegrityViolationException e) {
            log.error("Data integrity violation while creating agent: {}", e.getMessage());
            // Handle potential database constraint violations
            if (e.getMessage() != null && e.getMessage().contains("agent_name")) {
                throw new AgentNameExistsException(request.getAgentName(), e);
            }
            throw e;
        }
    }
    
    /**
     * Validates that the agent name is unique.
     * 
     * @param agentName the agent name to validate
     * @throws AgentNameExistsException if the agent name already exists
     */
    private void validateAgentNameUniqueness(String agentName) {
        if (agentRepository.existsByAgentName(agentName)) {
            log.warn("Attempt to create agent with existing name: {}", agentName);
            throw new AgentNameExistsException(agentName);
        }
    }
    
    /**
     * Validates URL formats in the request.
     * 
     * @param request the agent creation request
     * @throws InvalidUrlFormatException if any URL has invalid format
     */
    private void validateUrls(CreateAgentRequest request) {
        // Validate icon URL if provided
        if (request.getIconUrl() != null && !request.getIconUrl().trim().isEmpty()) {
            validateUrlFormat(request.getIconUrl(), "Icon URL");
        }
        
        // Validate target system URL
        if (request.getTargetSystemUrl() != null && !request.getTargetSystemUrl().trim().isEmpty()) {
            validateUrlFormat(request.getTargetSystemUrl(), "Target system URL");
        }
    }
    
    /**
     * Validates that a URL string has valid format.
     * 
     * @param urlString the URL string to validate
     * @param urlType the type of URL for error messaging
     * @throws InvalidUrlFormatException if the URL format is invalid
     */
    private void validateUrlFormat(String urlString, String urlType) {
        try {
            URI.create(urlString).toURL();
        } catch (Exception e) {
            log.warn("Invalid URL format for {}: {}", urlType, urlString);
            throw new InvalidUrlFormatException(urlString, e);
        }
    }
}
